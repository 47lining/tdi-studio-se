<%@ jet
imports="
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.metadata.IMetadataColumn
        java.util.List
"
 %>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();

    String host = ElementParameterParser.getValue(node,"__HOST__");
    String port = ElementParameterParser.getValue(node,"__PORT__");
    String userName = ElementParameterParser.getValue(node,"__USER_NAME__");
    String database = ElementParameterParser.getValue(node,"__DATABASE__");
    String authType = ElementParameterParser.getValue(node,"__AUTHENTICATION_TYPE__");

    boolean reuseConn = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    boolean useQueryOption = "true".equals(ElementParameterParser.getValue(node,"__USE_QUERY_OPTION__"));
    String queryOptionName = ElementParameterParser.getValue(node,"__QUERY_OPTION_NAME__");
    boolean isValidQueryOptionName = false;
    if(queryOptionName != null && !"".equals(queryOptionName) && !"\"\"".equals(queryOptionName)){
        isValidQueryOptionName = true;
    }
    String queryOptionType = ElementParameterParser.getValue(node,"__QUERY_OPTION_TYPE__");
    String queryOptionLiterals = ElementParameterParser.getValue(node,"__QUERY_OPTION_LITERALS__");
    if(useQueryOption){
        if(queryOptionLiterals != null){
            if(queryOptionLiterals.startsWith("\"") && queryOptionLiterals.endsWith("\"")){
               queryOptionLiterals = queryOptionLiterals.substring(1, queryOptionLiterals.length()-1);
            }
               queryOptionLiterals = queryOptionLiterals.replace("\r","").replace("\n","").replace("\\\"", "\"").replace("\\", "\\\\").replace("\"", "\\\"");
        }
    }
    String queryCriteria = ElementParameterParser.getValue(node,"__QUERY_CRITERIA__");
    String passwordFieldName = "__PASSWORD__";

 %>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

      long nb_line_<%= cid %> = 0;
      com.marklogic.client.DatabaseClient client_<%= cid %> = null;
<%
    if(reuseConn){
      String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
      String conn = "conn_" + connection;
     %>
        client_<%= cid %> = (com.marklogic.client.DatabaseClient)globalMap.get("<%=conn%>");
     <%
    }else{
     %>
        com.marklogic.client.DatabaseClientFactory.Authentication authType_<%= cid %> = null;
        <%
            if("DIGEST".equals(authType)){
                %>
                   authType_<%= cid %> = com.marklogic.client.DatabaseClientFactory.Authentication.DIGEST;
                <%
            }else if("BASIC".equals(authType)){
                %>
                   authType_<%= cid %> = com.marklogic.client.DatabaseClientFactory.Authentication.BASIC;
                <%
            }else{
                %>
                   Compile Err: UNKNOWN_AUTHENTICATION_TYPE: <%= authType %>
                <%
            }
        %>
                   client_<%= cid %> = com.marklogic.client.DatabaseClientFactory.newClient(
                          <%= host %>, Integer.valueOf(<%= port %>), <%= database %>, <%= userName %>, decryptedPassword_<%= cid %>, authType_<%= cid %>
                  );
     <%
    }
 %>
<%
if(useQueryOption && isValidQueryOptionName){
%>
       boolean qryOptsExistsOnServerSide_<%= cid %> = false;

       com.marklogic.client.admin.QueryOptionsManager qryOptMgr_<%= cid %> = client_<%= cid %>.newServerConfigManager().newQueryOptionsManager();
       com.marklogic.client.io.marker.QueryOptionsReadHandle qryOptsReadHdl_<%= cid %> = new com.marklogic.client.io.StringHandle();
       try{
           qryOptMgr_<%= cid %>.readOptions(<%= queryOptionName %>, qryOptsReadHdl_<%= cid %>);
           qryOptsExistsOnServerSide_<%= cid %> = true;
       }catch(Exception e){

       }

       if(!qryOptsExistsOnServerSide_<%= cid %>){
           com.marklogic.client.io.StringHandle strHandle = new com.marklogic.client.io.StringHandle();
           strHandle.withFormat(
                                                <%
                                                if("XML".equals(queryOptionType)){
                                                %>
                                                   com.marklogic.client.io.Format.XML
                                                <%
                                                }else if("JSON".equals(queryOptionType)){
                                                %>
                                                   com.marklogic.client.io.Format.JSON
                                                <%
                                                }else{
                                                %>
                                                   Compile Err: UNSUPPORTED QUERY OPTION TYPE <%= queryOptionType %>.
                                                <%
                                                }
                                                %>
                                                ).set("<%= queryOptionLiterals %>");
           qryOptMgr_<%= cid %>.writeOptions(<%= queryOptionName %>, strHandle);
       }
    <%
}
 %>
com.marklogic.client.query.QueryManager qryMgr_<%= cid %> = client_<%= cid %>.newQueryManager();
com.marklogic.client.query.StringQueryDefinition strQryDef_<%= cid %> = qryMgr_<%= cid %>.newStringDefinition(
                                                                                                             <% if(useQueryOption && isValidQueryOptionName){ %>
                                                                                                              <%= queryOptionName %>
                                                                                                             <% } %>
                                                                                                             );
strQryDef_<%= cid %>.setCriteria(<%= queryCriteria %>);
com.marklogic.client.io.SearchHandle searchHdl_<%= cid %> = new com.marklogic.client.io.SearchHandle();
qryMgr_<%= cid %>.search(strQryDef_<%= cid %>, searchHdl_<%= cid %>);
//long pageSize_<%= cid %> = qryMgr_<%= cid %>.getPageLength();
long matchedDocNumber_<%= cid %> = searchHdl_<%= cid %>.getTotalResults();
     nb_line_<%= cid %> = matchedDocNumber_<%= cid %>;
//long pageNumber_<%= cid %> = Math.ceil(matchedDocNumber_<%= cid %>/pageSize_<%= cid %>);
qryMgr_<%= cid %>.setPageLength(matchedDocNumber_<%= cid %>);
qryMgr_<%= cid %>.search(strQryDef_<%= cid %>, searchHdl_<%= cid %>);
com.marklogic.client.query.MatchDocumentSummary[] matchDocSummary_<%= cid %> = searchHdl_<%= cid %>.getMatchResults();
